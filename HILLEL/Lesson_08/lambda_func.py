"""                двоеточие
    lambda a1, b2, c3: (a1 + c3) * b2
    ключевое   список     действия
    слово     аргументов

"""
"""
Лямбды в отличиии от именованных функций не занимают места в пямяти, 
лямбды появляются в момент вызова, исполняются и уничтожаются по завершению
"""
import random

lst = [1, 2, 3, 4, 5, 6, 7, 8]
lst1 = []
for el in lst:
    lst1.append(el+1)
print(lst1)

print()

lst3 = []
for i in range(len(lst)):
    if i % 2:
        lst3.append(lst[i] + 1)
    else:
        lst3.append(lst[i] * 2)

print(lst3)

print(lst1)



"""
Функции для пакетной обработки коллекций
map - имеет 2 параметра (что делаем, объект), она обрабатывает ВСЕ элементы коллекции и упаковывает данные в специальный объект <map object at 0x101ee1690>
который можно превратить в список, кортеж итд
map(func, *iterables) --> map object 
"""

# map, filter, zip -

# map обрабатывает все элементы коллекции
              # 1 параметр      2 параметр
lst2 = list(map(lambda x: x+1, lst))
print(lst2)

lst = [random.randint(10, 99) for _ in range(15)]
print(lst)

lst4 = []
for el in lst:
    if el % 2:
        lst4.append(el)
print(lst4)


def func(x):
    return x % 2
"""
# filter перебирает каждый элемент на соответствие какому-то условию
# если условие выполняется, то элемент будет взят в обработку
# и к нему будут применены соответствующие действия
# у filter тоже 2 параметра: функция обработчик (лямбда или обычная) и исходный список
"""

lst5 = list(filter(func, lst)) # тут идет ссылка на func, она без скобок, если бы
# был вызов  то стояли бы скобки. фильтр и map требуют ссылку вместо вызова.
print(f' lst5 с обычной именованной функцией {lst5}')
lst6 = list(filter(lambda x: x % 2, lst)) # эл-ты lst проверяются на нечетность
# то есть если рез-ты лямбда равны 0 - то этот эл-т фильтр не пройдет.
print(f' lst6 с лямбдой {lst6}')

lst1 = [1, 2, 3, 4, 5, 6]
lst2 = ['a', 'b', 'c', 'd', 'e', 'f']

# d1 = {}
# for i in range(len(lst1)):
#     d1[lst1[i]] = lst2[i]
# print(d1)
"""
# zip предназнаяен для склеивания нескольких коллекций (2-3-4-5 итд). На выходе создёт объект типа zip
list -  даст список кортежей, dict - даст словарь первый список будет ключами (если соединяется больше двух коллекций - то словарь не получится)
# https://pythonru.com/uroki/funkcija-zip-dlja-nachinajushhih
# тут хорошо написано
# если размеры объектов не совпадают, то zip создает обект размером с самый короткий
# есть еще в itertools функция longzip - она создает объект по самомому длинному
#  пустые места будут заполнены NONE или Можно указать свой вариант заполнения https://pythoner.name/zip
# zip нередко применяют для выполнения совместных или одновременных действий над элементами разных списков
"""
d2 = dict(zip(lst1, lst2))
print(d2)