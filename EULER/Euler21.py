"""
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called
amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.
"""
from sympy import divisors, proper_divisors
from time import time


def amic_num(n):

    storage = {}
    col = 0
    for i in range(1, n):
        #d = sum(divisors(i, proper=True))
        d = sum(proper_divisors(i))
        # d = sum(divisors(i)[:-1]) # пркольное использование - без последнего
        storage[i] = d
        if d in storage.keys():
            if storage[d] == i and d != i:
                # print(i, d)
                col += i + d
    #print(storage)
    return col

def euler_sol(): # самое быстрое решение
    v = [0] * 10000
    sum = 0

    for value in range(1, 10000):
        i = 2 * value
        while i < 10000:
            v[i] += value # если в решете делители убираются, то здесь наоборот добавляются
            i += value
    print(v)
    for i in range(1, 10000):
        if v[i] < 10001:
            if i == v[v[i]] and i != v[i]:
                sum += i

    print(sum)

def euler_sol_2():
    from math import sqrt

    def get_all_factors(n: int) -> list:
        f = []
        m = int(sqrt(n))
        for i in range(1, m + 1):
            if (n % i) == 0:
                f.append(i)
                if i != n / i:
                    f.append(n / i)
        return f

    def pe_p21(n: int = 10000) -> int:
        fs: list = []
        for i in range(n):
            pf = get_all_factors(i)
            if i in pf:
                pf.remove(i)
            fs.append(int(sum(pf)))
        an: list = []
        for id, v in enumerate(fs):
            if v < len(fs):
                if fs[v] == id and id != v:
                    an.append(id)
        return sum(an)

    print(pe_p21())


def euler_sol_3():
    def PE21(lim):
        def d(x): return sum(i + x / i for i in range(2, int(x ** (.5))) if x % i == 0) + 1

        return sum(a for a in range(2, lim) if a == d(d(a)) and a != d(a))

    print(PE21(10000))

def main():
    n = 10_000
    start = time()
    print(amic_num(n))
    end = time()
    print(end-start)

    start = time()
    euler_sol()
    end = time()
    print(end-start)

    # start = time()
    # euler_sol_2()
    # end = time()
    # print(end-start)

    start = time()
    euler_sol_3()
    end = time()
    print(end-start)


if __name__ == '__main__':
    main()
"""
{1: 0, 2: 1, 3: 1, 4: 3, 5: 1, 6: 6, 7: 1, 8: 7, 9: 4, 10: 8, 11: 1, 12: 16, 13: 1, 14: 10, 15: 9, 16: 15, 17: 1, 18: 21, 19: 1, 20: 22, 21: 11, 22: 14, 23: 1, 24: 36, 25: 6, 26: 16, 27: 13, 28: 28, 29: 1, 30: 42, 31: 1, 32: 31, 33: 15, 34: 20, 35: 13, 36: 55, 37: 1, 38: 22, 39: 17, 40: 50, 41: 1, 42: 54, 43: 1, 44: 40, 45: 33, 46: 26, 47: 1, 48: 76, 49: 8, 50: 43, 51: 21, 52: 46, 53: 1, 54: 66, 55: 17, 56: 64, 57: 23, 58: 32, 59: 1, 60: 108, 61: 1, 62: 34, 63: 41, 64: 63, 65: 19, 66: 78, 67: 1, 68: 58, 69: 27, 70: 74, 71: 1, 72: 123, 73: 1, 74: 40, 75: 49, 76: 64, 77: 19, 78: 90, 79: 1, 80: 106, 81: 40, 82: 44, 83: 1, 84: 140, 85: 23, 86: 46, 87: 33, 88: 92, 89: 1, 90: 144, 91: 21, 92: 76, 93: 35, 94: 50, 95: 25, 96: 156, 97: 1, 98: 73, 99: 57, 100: 117, 101: 1, 102: 114, 103: 1, 104: 106, 105: 87, 106: 56, 107: 1, 108: 172, 109: 1, 110: 106, 111: 41, 112: 136, 113: 1, 114: 126, 115: 29, 116: 94, 117: 65, 118: 62, 119: 25, 120: 240, 121: 12, 122: 64, 123: 45, 124: 100, 125: 31, 126: 186, 127: 1, 128: 127, 129: 47, 130: 122, 131: 1, 132: 204, 133: 27, 134: 70, 135: 105, 136: 134, 137: 1, 138: 150, 139: 1, 140: 196, 141: 51, 142: 74, 143: 25, 144: 259, 145: 35, 146: 76, 147: 81, 148: 118, 149: 1, 150: 222, 151: 1, 152: 148, 153: 81, 154: 134, 155: 37, 156: 236, 157: 1, 158: 82, 159: 57, 160: 218, 161: 31, 162: 201, 163: 1, 164: 130, 165: 123, 166: 86, 167: 1, 168: 312, 169: 14, 170: 154, 171: 89, 172: 136, 173: 1, 174: 186, 175: 73, 176: 196, 177: 63, 178: 92, 179: 1, 180: 366, 181: 1, 182: 154, 183: 65, 184: 176, 185: 43, 186: 198, 187: 29, 188: 148, 189: 131, 190: 170, 191: 1, 192: 316, 193: 1, 194: 100, 195: 141, 196: 203, 197: 1, 198: 270, 199: 1, 200: 265, 201: 71, 202: 104, 203: 37, 204: 300, 205: 47, 206: 106, 207: 105, 208: 226, 209: 31, 210: 366, 211: 1, 212: 166, 213: 75, 214: 110, 215: 49, 216: 384, 217: 39, 218: 112, 219: 77, 220: 284, 221: 31, 222: 234, 223: 1, 224: 280, 225: 178, 226: 116, 227: 1, 228: 332, 229: 1, 230: 202, 231: 153, 232: 218, 233: 1, 234: 312, 235: 53, 236: 184, 237: 83, 238: 194, 239: 1, 240: 504, 241: 1, 242: 157, 243: 121, 244: 190, 245: 97, 246: 258, 247: 33, 248: 232, 249: 87, 250: 218, 251: 1, 252: 476, 253: 35, 254: 130, 255: 177, 256: 255, 257: 1, 258: 270, 259: 45, 260: 328, 261: 129, 262: 134, 263: 1, 264: 456, 265: 59, 266: 214, 267: 93, 268: 208, 269: 1, 270: 450, 271: 1, 272: 286, 273: 175, 274: 140, 275: 97, 276: 396, 277: 1, 278: 142, 279: 137, 280: 440, 281: 1, 282: 294, 283: 1, 284: 220, 285: 195, 286: 218, 287: 49, 288: 531, 289: 18, 290: 250, 291: 101, 292: 226, 293: 1, 294: 390, 295: 65, 296: 274, 297: 183, 298: 152, 299: 37, 300: 568, 301: 51, 302: 154, 303: 105, 304: 316, 305: 67, 306: 396, 307: 1, 308: 364, 309: 107, 310: 266, 311: 1, 312: 528, 313: 1, 314: 160, 315:
"""